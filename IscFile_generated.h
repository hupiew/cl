// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ISCFILE_IMSEARCH_H_
#define FLATBUFFERS_GENERATED_ISCFILE_IMSEARCH_H_

#include "flatbuffers/flatbuffers.h"

namespace imsearch {

struct IscTitle;
struct IscTitleBuilder;

struct IscIndex;
struct IscIndexBuilder;

struct IscFile;
struct IscFileBuilder;

struct IscTitle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IscTitleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OFFSET = 4,
    VT_TITLE_STR = 6
  };
  uint32_t offset() const {
    return GetField<uint32_t>(VT_OFFSET, 0);
  }
  const flatbuffers::String *title_str() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE_STR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OFFSET) &&
           VerifyOffset(verifier, VT_TITLE_STR) &&
           verifier.VerifyString(title_str()) &&
           verifier.EndTable();
  }
};

struct IscTitleBuilder {
  typedef IscTitle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_offset(uint32_t offset) {
    fbb_.AddElement<uint32_t>(IscTitle::VT_OFFSET, offset, 0);
  }
  void add_title_str(flatbuffers::Offset<flatbuffers::String> title_str) {
    fbb_.AddOffset(IscTitle::VT_TITLE_STR, title_str);
  }
  explicit IscTitleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<IscTitle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IscTitle>(end);
    return o;
  }
};

inline flatbuffers::Offset<IscTitle> CreateIscTitle(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t offset = 0,
    flatbuffers::Offset<flatbuffers::String> title_str = 0) {
  IscTitleBuilder builder_(_fbb);
  builder_.add_title_str(title_str);
  builder_.add_offset(offset);
  return builder_.Finish();
}

inline flatbuffers::Offset<IscTitle> CreateIscTitleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t offset = 0,
    const char *title_str = nullptr) {
  auto title_str__ = title_str ? _fbb.CreateString(title_str) : 0;
  return imsearch::CreateIscTitle(
      _fbb,
      offset,
      title_str__);
}

struct IscIndex FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IscIndexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LENGTH = 6,
    VT_TYPE = 8,
    VT_TIMEINDEX = 12,
    VT_IMAGEINDEX = 14,
    VT_TITLES = 16,
    VT_HASH_DATA = 18
  };
  uint32_t length() const {
    return GetField<uint32_t>(VT_LENGTH, 0);
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 255);
  }
  const flatbuffers::Vector<uint32_t> *timeindex() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_TIMEINDEX);
  }
  const flatbuffers::Vector<uint32_t> *imageindex() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IMAGEINDEX);
  }
  const flatbuffers::Vector<flatbuffers::Offset<imsearch::IscTitle>> *titles() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<imsearch::IscTitle>> *>(VT_TITLES);
  }
  const flatbuffers::Vector<uint8_t> *hash_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_LENGTH) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_TIMEINDEX) &&
           verifier.VerifyVector(timeindex()) &&
           VerifyOffset(verifier, VT_IMAGEINDEX) &&
           verifier.VerifyVector(imageindex()) &&
           VerifyOffset(verifier, VT_TITLES) &&
           verifier.VerifyVector(titles()) &&
           verifier.VerifyVectorOfTables(titles()) &&
           VerifyOffset(verifier, VT_HASH_DATA) &&
           verifier.VerifyVector(hash_data()) &&
           verifier.EndTable();
  }
};

struct IscIndexBuilder {
  typedef IscIndex Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_length(uint32_t length) {
    fbb_.AddElement<uint32_t>(IscIndex::VT_LENGTH, length, 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(IscIndex::VT_TYPE, type, 255);
  }
  void add_timeindex(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> timeindex) {
    fbb_.AddOffset(IscIndex::VT_TIMEINDEX, timeindex);
  }
  void add_imageindex(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> imageindex) {
    fbb_.AddOffset(IscIndex::VT_IMAGEINDEX, imageindex);
  }
  void add_titles(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<imsearch::IscTitle>>> titles) {
    fbb_.AddOffset(IscIndex::VT_TITLES, titles);
  }
  void add_hash_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_data) {
    fbb_.AddOffset(IscIndex::VT_HASH_DATA, hash_data);
  }
  explicit IscIndexBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<IscIndex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IscIndex>(end);
    return o;
  }
};

inline flatbuffers::Offset<IscIndex> CreateIscIndex(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t length = 0,
    uint8_t type = 255,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> timeindex = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> imageindex = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<imsearch::IscTitle>>> titles = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_data = 0) {
  IscIndexBuilder builder_(_fbb);
  builder_.add_hash_data(hash_data);
  builder_.add_titles(titles);
  builder_.add_imageindex(imageindex);
  builder_.add_timeindex(timeindex);
  builder_.add_length(length);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<IscIndex> CreateIscIndexDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t length = 0,
    uint8_t type = 255,
    const std::vector<uint32_t> *timeindex = nullptr,
    const std::vector<uint32_t> *imageindex = nullptr,
    const std::vector<flatbuffers::Offset<imsearch::IscTitle>> *titles = nullptr,
    const std::vector<uint8_t> *hash_data = nullptr) {
  auto timeindex__ = timeindex ? _fbb.CreateVector<uint32_t>(*timeindex) : 0;
  auto imageindex__ = imageindex ? _fbb.CreateVector<uint32_t>(*imageindex) : 0;
  auto titles__ = titles ? _fbb.CreateVector<flatbuffers::Offset<imsearch::IscTitle>>(*titles) : 0;
  auto hash_data__ = hash_data ? _fbb.CreateVector<uint8_t>(*hash_data) : 0;
  return imsearch::CreateIscIndex(
      _fbb,
      length,
      type,
      timeindex__,
      imageindex__,
      titles__,
      hash_data__);
}

struct IscFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef IscFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ZIP_ID = 6,
    VT_FPS = 8,
    VT_INDECIES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *zip_id() const {
    return GetPointer<const flatbuffers::String *>(VT_ZIP_ID);
  }
  float fps() const {
    return GetField<float>(VT_FPS, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<imsearch::IscIndex>> *indecies() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<imsearch::IscIndex>> *>(VT_INDECIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ZIP_ID) &&
           verifier.VerifyString(zip_id()) &&
           VerifyField<float>(verifier, VT_FPS) &&
           VerifyOffset(verifier, VT_INDECIES) &&
           verifier.VerifyVector(indecies()) &&
           verifier.VerifyVectorOfTables(indecies()) &&
           verifier.EndTable();
  }
};

struct IscFileBuilder {
  typedef IscFile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(IscFile::VT_NAME, name);
  }
  void add_zip_id(flatbuffers::Offset<flatbuffers::String> zip_id) {
    fbb_.AddOffset(IscFile::VT_ZIP_ID, zip_id);
  }
  void add_fps(float fps) {
    fbb_.AddElement<float>(IscFile::VT_FPS, fps, 0.0f);
  }
  void add_indecies(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<imsearch::IscIndex>>> indecies) {
    fbb_.AddOffset(IscFile::VT_INDECIES, indecies);
  }
  explicit IscFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<IscFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IscFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<IscFile> CreateIscFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> zip_id = 0,
    float fps = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<imsearch::IscIndex>>> indecies = 0) {
  IscFileBuilder builder_(_fbb);
  builder_.add_indecies(indecies);
  builder_.add_fps(fps);
  builder_.add_zip_id(zip_id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<IscFile> CreateIscFileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *zip_id = nullptr,
    float fps = 0.0f,
    const std::vector<flatbuffers::Offset<imsearch::IscIndex>> *indecies = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto zip_id__ = zip_id ? _fbb.CreateString(zip_id) : 0;
  auto indecies__ = indecies ? _fbb.CreateVector<flatbuffers::Offset<imsearch::IscIndex>>(*indecies) : 0;
  return imsearch::CreateIscFile(
      _fbb,
      name__,
      zip_id__,
      fps,
      indecies__);
}

inline const imsearch::IscFile *GetIscFile(const void *buf) {
  return flatbuffers::GetRoot<imsearch::IscFile>(buf);
}

inline const imsearch::IscFile *GetSizePrefixedIscFile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<imsearch::IscFile>(buf);
}

inline const char *IscFileIdentifier() {
  return "ISCF";
}

inline bool IscFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, IscFileIdentifier());
}

inline bool VerifyIscFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<imsearch::IscFile>(IscFileIdentifier());
}

inline bool VerifySizePrefixedIscFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<imsearch::IscFile>(IscFileIdentifier());
}

inline void FinishIscFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<imsearch::IscFile> root) {
  fbb.Finish(root, IscFileIdentifier());
}

inline void FinishSizePrefixedIscFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<imsearch::IscFile> root) {
  fbb.FinishSizePrefixed(root, IscFileIdentifier());
}

}  // namespace imsearch

#endif  // FLATBUFFERS_GENERATED_ISCFILE_IMSEARCH_H_
